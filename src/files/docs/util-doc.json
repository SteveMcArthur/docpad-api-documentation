{"text":"Docpad Lib","id":"root","children":[{"id":"F0","text":"docpadUtil","typ":"class","icon":"class","comments":["=====================================","Requires","","Standard Library","External","=====================================","Export"],"code":[],"children":[{"id":"F1","text":"writeStderr","typ":"method","icon":"method","comments":["Write to stderr"],"code":["\t\ttry","\t\t\tprocess.stderr.write(data)","\t\tcatch err","\t\t\tprocess.stdout.write(data)",""],"children":[]},{"id":"F2","text":"writeError","typ":"method","icon":"method","comments":["Write an error"],"code":["\t\tdocpadUtil.writeStderr(err.stack?.toString?() or err.message or err)",""],"children":[]},{"id":"F3","text":"wait","typ":"prop","icon":"prop","comments":["Wait"],"code":["(time, fn) -> setTimeout(fn, time)"],"children":[]},{"id":"F4","text":"getDefaultLogLevel","typ":"method","icon":"method","comments":["Get Default Log Level"],"code":["\t\tif docpadUtil.isTravis() or ('-d' in process.argv)","\t\t\treturn 7","\t\telse","\t\t\treturn 5",""],"children":[]},{"id":"F5","text":"isTravis","typ":"method","icon":"method","comments":["Is Travis"],"code":["\t\treturn process.env.TRAVIS_NODE_VERSION?",""],"children":[]},{"id":"F6","text":"isTTY","typ":"method","icon":"method","comments":["Is TTY"],"code":["\t\treturn process.stdout?.isTTY is true and process.stderr?.isTTY is true",""],"children":[]},{"id":"F7","text":"isStandalone","typ":"method","icon":"method","comments":["Is Standadlone"],"code":["\t\treturn /docpad$/.test(process.argv[1] or '')",""],"children":[]},{"id":"F8","text":"isUser","typ":"method","icon":"method","comments":["Is User"],"code":["\t\treturn docpadUtil.isStandalone() and docpadUtil.isTTY() and docpadUtil.isTravis() is false",""],"children":[]},{"id":"F9","text":"inspect","typ":"prop","icon":"prop","comments":["Inspect"],"code":["(obj, opts) ->","\t\topts ?= {}","","\t\tif docpadUtil.isTTY()","\t\t\topts.colors ?= '--no-colors' not in process.argv","","\t\telse","\t\t\topts.colors = false","","\t\treturn util.inspect(obj, opts)",""],"children":[]},{"id":"F10","text":"isStandardEncoding","typ":"method","icon":"method","comments":["Prepare","If the terminal supports colours, and the user hasn't set anything, then default to a sensible default","If the terminal doesn't support colours, then over-write whatever the user set","Inspect and return","Standard Encodings"],"code":["\t\treturn encoding.toLowerCase() in ['ascii', 'utf8', 'utf-8']",""],"children":[]},{"id":"F11","text":"getLocalDocPadExecutable","typ":"method","icon":"method","comments":["Get Local DocPad Installation Executable"],"code":["\t\treturn pathUtil.join(process.cwd(), 'node_modules', 'docpad', 'bin', 'docpad')",""],"children":[]},{"id":"F12","text":"isLocalDocPadExecutable","typ":"method","icon":"method","comments":["Is Local DocPad Installation"],"code":["\t\treturn docpadUtil.getLocalDocPadExecutable() in process.argv",""],"children":[]},{"id":"F13","text":"getLocalDocPadExecutableExistance","typ":"method","icon":"method","comments":["Does Local DocPad Installation Exist?"],"code":["\t\treturn require('safefs').existsSync(docpadUtil.getLocalDocPadExecutable()) is true",""],"children":[]},{"id":"F14","text":"startLocalDocPadExecutable","typ":"method","icon":"method","comments":["Spawn Local DocPad Executable"],"code":["\t\targs = process.argv.slice(2)","\t\tcommand = ['node', docpadUtil.getLocalDocPadExecutable()].concat(args)","\t\treturn require('safeps').spawn command, {stdio:'inherit'}, (err) ->","\t\t\tif err","\t\t\t\tif next","\t\t\t\t\tnext(err)","\t\t\t\telse","\t\t\t\t\tmessage = 'An error occured within the child DocPad instance: '+err.message+'\\n'","\t\t\t\t\tdocpadUtil.writeStderr(message)","\t\t\telse","\t\t\t\tnext?()",""],"children":[]},{"id":"F15","text":"getBasename","typ":"method","icon":"method","comments":["get a filename without the extension"],"code":["\t\tif filename[0] is '.'","\t\t\tbasename = filename.replace(/^(\\.[^\\.]+)\\..*$/, '$1')","\t\telse","\t\t\tbasename = filename.replace(/\\..*$/, '')","\t\treturn basename",""],"children":[]},{"id":"F16","text":"getExtensions","typ":"method","icon":"method","comments":["get the extensions of a filename"],"code":["\t\textensions = filename.split(/\\./g).slice(1)","\t\treturn extensions",""],"children":[]},{"id":"F17","text":"getExtension","typ":"method","icon":"method","comments":["get the extension from a bunch of extensions"],"code":["\t\tunless require('typechecker').isArray(extensions)","\t\t\textensions = docpadUtil.getExtensions(extensions)","","\t\tif extensions.length isnt 0","\t\t\textension = extensions.slice(-1)[0] or null","\t\telse","\t\t\textension = null","","\t\treturn extension",""],"children":[]},{"id":"F18","text":"getDirPath","typ":"method","icon":"method","comments":["get the dir path"],"code":["\t\treturn pathUtil.dirname(path) or ''",""],"children":[]},{"id":"F19","text":"getFilename","typ":"method","icon":"method","comments":["get filename"],"code":["\t\treturn pathUtil.basename(path)",""],"children":[]},{"id":"F20","text":"getOutFilename","typ":"prop","icon":"prop","comments":["get out filename"],"code":["(basename, extension) ->","\t\tif basename is '.'+extension  # prevent: .htaccess.htaccess","\t\t\treturn basename","\t\telse","\t\t\treturn basename+(if extension then '.'+extension else '')",""],"children":[]},{"id":"F21","text":"getUrl","typ":"method","icon":"method","comments":["get url"],"code":["\t\treturn '/'+relativePath.replace(/[\\\\]/g, '/')",""],"children":[]},{"id":"F22","text":"getSlug","typ":"method","icon":"method","comments":["get slug"],"code":["\t\treturn require('bal-util').generateSlugSync(relativeBase)",""],"children":[]},{"id":"F23","text":"action","typ":"prop","icon":"prop","comments":["Perform an action","next(err,...), ... = any special arguments from the action","this should be it's own npm module","as we also use the concept of actions in a few other packages"],"code":["(action,opts,next) ->","\t\t[opts,next] = extractOptsAndCallback(opts,next)","\t\tme = @","\t\tlocale = me.getLocale()","\t\trun = opts.run ? true","\t\trunner = opts.runner ? me.getActionRunner()","","\t\tif Array.isArray(action)","\t\t\tactions = action","\t\telse","\t\t\tactions = action.split(/[,\\s]+/g)","","\t\tactions = uniq compact actions","","\t\tif actions.length is 0","\t\t\terr = new Error(locale.actionEmpty)","\t\t\treturn next(err); me","","\t\tif actions.length > 1","\t\t\tactionTaskOrGroup = runner.createGroup 'actions bundle: '+actions.join(' ')","","\t\t\tfor action in actions","\t\t\t\t# Fetch","\t\t\t\tactionMethod = me[action].bind(me)","","\t\t\t\t# Check","\t\t\t\tunless actionMethod","\t\t\t\t\terr = new Error(util.format(locale.actionNonexistant, action))","\t\t\t\t\treturn next(err); me","","\t\t\t\t# Task","\t\t\t\ttask = actionTaskOrGroup.createTask(action, actionMethod, {args: [opts]})","\t\t\t\tactionTaskOrGroup.addTask(task)","","\t\telse","\t\t\t# Fetch the action","\t\t\taction = actions[0]","","\t\t\t# Fetch","\t\t\tactionMethod = me[action].bind(me)","","\t\t\t# Check","\t\t\tunless actionMethod","\t\t\t\terr = new Error(util.format(locale.actionNonexistant, action))","\t\t\t\treturn next(err); me","","\t\t\t# Task","\t\t\tactionTaskOrGroup = runner.createTask(action, actionMethod, {args: [opts]})","","\t\trunnerTask = runner.createTask \"runner task for action: #{action}\", (continueWithRunner) ->","\t\t\t# Add our listener for our action","\t\t\tactionTaskOrGroup.done (args...) ->","\t\t\t\t# If we have a completion callback, let it handle the error","\t\t\t\tif next","\t\t\t\t\tnext(args...)","\t\t\t\t\targs[0] = null","","\t\t\t\t# Continue with our runner","\t\t\t\tcontinueWithRunner(args...)","","\t\t\t# Run our action","\t\t\tactionTaskOrGroup.run()","","\t\trunner.addTask(runnerTask)","\t\trunner.run()  if run is true","","\t\treturn me"],"children":[]}]}]}