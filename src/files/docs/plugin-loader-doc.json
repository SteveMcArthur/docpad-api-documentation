{"text":"Docpad Lib","id":"root","children":[{"id":"D0","text":"PluginLoader","typ":"class","icon":"class","comments":["---------------------------------","Requires","","Standard Library","External","---------------------------------","Classes","","Define Plugin Loader"],"code":[],"children":[{"id":"D1","text":"docpad","typ":"prop","icon":"prop","comments":["---------------------------------","Constructed","","DocPad Instance"],"code":["null"],"children":[]},{"id":"D2","text":"BasePlugin","typ":"prop","icon":"prop","comments":["BasePlugin Class"],"code":["null"],"children":[]},{"id":"D3","text":"dirPath","typ":"prop","icon":"prop","comments":["The full path of the plugin's directory"],"code":["null"],"children":[]},{"id":"D4","text":"packagePath","typ":"prop","icon":"prop","comments":["---------------------------------","Loaded","","The full path of the plugin's package.json file"],"code":["null"],"children":[]},{"id":"D5","text":"packageData","typ":"prop","icon":"prop","comments":["The parsed contents of the plugin's package.json file"],"code":["{}"],"children":[]},{"id":"D6","text":"pluginPath","typ":"prop","icon":"prop","comments":["The full path of the plugin's main file"],"code":["null"],"children":[]},{"id":"D7","text":"pluginClass","typ":"prop","icon":"prop","comments":["The parsed content of the plugin's main file"],"code":["{}"],"children":[]},{"id":"D8","text":"pluginName","typ":"prop","icon":"prop","comments":["Plugin name"],"code":["null"],"children":[]},{"id":"D9","text":"pluginVersion","typ":"prop","icon":"prop","comments":["Plugin version"],"code":["null"],"children":[]},{"id":"D10","text":"nodeModulesPath","typ":"prop","icon":"prop","comments":["Node modules path"],"code":["null"],"children":[]},{"id":"D11","text":"constructor","typ":"prop","icon":"prop","comments":["---------------------------------","Functions","","Constructor"],"code":["({@docpad,@dirPath,@BasePlugin}) ->","\t\tdocpad = @docpad","","\t\t@pluginName = pathUtil.basename(@dirPath).replace(/^docpad-plugin-/,'')","\t\t@pluginClass = {}","\t\t@packageData = {}","\t\t@nodeModulesPath = pathUtil.resolve(@dirPath, 'node_modules')",""],"children":[]},{"id":"D12","text":"exists","typ":"method","icon":"method","comments":["Prepare","Apply","Exists","Loads the package.json file and extracts the main path","next(err,exists)"],"code":["\t\tpackagePath = @packagePath or pathUtil.resolve(@dirPath, \"package.json\")","\t\tfailure = (err=null) ->","\t\t\treturn next(err, false)","\t\tsuccess = ->","\t\t\treturn next(null, true)","","\t\tsafefs.exists packagePath, (exists) =>","\t\t\treturn failure()  unless exists","","\t\t\t# Apply","\t\t\t@packagePath = packagePath","","\t\t\t# Read the package","\t\t\tsafefs.readFile packagePath, (err,data) =>","\t\t\t\treturn failure(err)  if err","","\t\t\t\t# Parse the package","\t\t\t\ttry","\t\t\t\t\t@packageData = JSON.parse data.toString()","\t\t\t\tcatch err","\t\t\t\t\treturn failure(err)","\t\t\t\tfinally","\t\t\t\t\treturn failure()  unless @packageData","","\t\t\t\t# Extract the version and main","\t\t\t\tpluginVersion = @packageData.version","\t\t\t\tpluginPath = @packageData.main and pathUtil.join(@dirPath, @packageData.main)","","\t\t\t\t# Check defined","\t\t\t\treturn failure()  unless pluginVersion","\t\t\t\treturn failure()  unless pluginPath","","\t\t\t\t# Success","\t\t\t\t@pluginVersion = pluginVersion","\t\t\t\t@pluginPath = pluginPath","\t\t\t\treturn success()","","\t\t@",""],"children":[]},{"id":"D13","text":"unsupported","typ":"method","icon":"method","comments":["Prepare","Check the package","Chain","Unsupported","Check if this plugin is unsupported","next(err,supported)"],"code":["\t\tdocpad = @docpad","","\t\tversion = @packageData.version","\t\tkeywords = @packageData.keywords or []","\t\tplatforms = @packageData.platforms or []","\t\tengines = @packageData.engines or {}","\t\tpeerDependencies = @packageData.peerDependencies or {}","","\t\tunsupported =","\t\t\t# Check type","\t\t\tif 'docpad-plugin' not in keywords","\t\t\t\t'type'","","\t\t\t# Check version","\t\t\telse if version and not semver.satisfies(version, docpad.pluginVersion)","\t\t\t\t'version-plugin'","","\t\t\t# Check platform","\t\t\telse if platforms.length and process.platform not in platforms","\t\t\t\t'platform'","","\t\t\t# Check node engine","\t\t\telse if engines.node? and not semver.satisfies(process.version, engines.node)","\t\t\t\t'engine-node'","","\t\t\t# Check docpad engine","\t\t\telse if engines.docpad? and not semver.satisfies(docpad.getVersion(), engines.docpad)","\t\t\t\t'version-docpad'","","\t\t\t# Check docpad peerDependencies","\t\t\telse if peerDependencies.docpad? and not semver.satisfies(docpad.getVersion(), peerDependencies.docpad)","\t\t\t\t'version-docpad'","","\t\t\t# Supported","\t\t\telse","\t\t\t\tfalse","","\t\tnext(null, unsupported)","","\t\t@",""],"children":[]},{"id":"D14","text":"install","typ":"method","icon":"method","comments":["Prepare","Extract","Check","Supported","Chain","Install","Installs the plugins node modules","next(err)"],"code":["\t\tdocpad = @docpad","","\t\tif @packagePath","\t\t\t# Install npm modules","\t\t\tdocpad.initNodeModules(","\t\t\t\tpath: @dirPath","\t\t\t\tnext: (err,results) ->","\t\t\t\t\t# Forward","\t\t\t\t\treturn next(err)","\t\t\t)","\t\telse","\t\t\t# Continue","\t\t\tnext()","","\t\t@",""],"children":[]},{"id":"D15","text":"load","typ":"method","icon":"method","comments":["Prepare","Only install if we have a package path","Chain","Load","Load in the pluginClass from the pugin file","next(err,pluginClass)"],"code":["\t\tdocpad = @docpad","\t\tlocale = docpad.getLocale()","","\t\tif pathUtil.extname(@pluginPath) is '.coffee'","\t\t\t# Warn the user they are trying to include an uncompiled plugin (if they want to be warned)","\t\t\t# They have the option of opting out of warnings for private plugins","\t\t\tunless @packageData.private is true and docpad.getConfig().warnUncompiledPrivatePlugins is false","\t\t\t\tdocpad.warn util.format(locale.pluginUncompiled, @pluginName, @packageData.bugs?.url or locale.pluginIssueTracker)","","\t\t\t# Attempt to include the coffee-script register extension","\t\t\t# coffee-script is an external party dependency (docpad doesn't depend on it, so we don't install it)","\t\t\t# so we may not have it, hence the try catch","\t\t\ttry","\t\t\t\trequire('coffee-script/register')","\t\t\tcatch err","\t\t\t\t# Including coffee-script has failed, so let the user know, and exit","\t\t\t\terr.context = util.format(locale.pluginUncompiledFailed, @pluginName, @packageData.bugs?.url or locale.pluginIssueTracker)","\t\t\t\treturn next(err); @","","","\t\ttry","\t\t\t@pluginClass = require(@pluginPath)(@BasePlugin)","\t\tcatch err","\t\t\t# Loading the plugin has failed, so let the user know, and exit","\t\t\terr.context = util.format(locale.pluginLoadFailed, @pluginName, @packageData.bugs?.url or locale.pluginIssueTracker)","\t\t\treturn next(err); @","","\t\t@pluginClass::version ?= @pluginVersion","\t\tpluginPrototypeName = @pluginClass::name","","\t\tif /^[a-z0-9]+$/.test(@pluginName) is false","\t\t\tvalidPluginName = @pluginName.replace(/[^a-z0-9]/,'')","\t\t\tdocpad.warn util.format(locale.pluginNamingConventionInvalid, @pluginName, validPluginName)","","\t\tif pluginPrototypeName is null","\t\t\t@pluginClass::name = @pluginName","\t\t\tdocpad.warn util.format(locale.pluginPrototypeNameUndefined, @pluginName)","","\t\telse if pluginPrototypeName isnt @pluginName","\t\t\tdocpad.warn util.format(locale.pluginPrototypeNameDifferent, @pluginName, pluginPrototypeName)","","\t\tnext(null, @pluginClass)","","\t\t@",""],"children":[]},{"id":"D16","text":"create","typ":"prop","icon":"prop","comments":["Prepare","Ensure we still have deprecated support for old-style uncompiled plugins","Attempt to load the plugin","Plugin loaded, inject it's version and grab its name","Check Alphanumeric Name","Check for Empty Name","Check for Same Name","Return our plugin","Chain","Create Instance","next(err,pluginInstance)"],"code":["(config,next) ->","\t\ttry","\t\t\t# Create instance with merged configuration","\t\t\tdocpad = @docpad","\t\t\tpluginInstance = new @pluginClass({docpad,config})","\t\tcatch err","\t\t\t# An error occured, return it","\t\t\treturn next(err, null)","","\t\treturn next(null, pluginInstance)","","\t\t@","",""],"children":[]}]}]}